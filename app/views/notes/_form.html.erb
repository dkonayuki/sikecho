<div id="note-edit" data-id="<%= @note.id %>">
	<%= form_for @note, html: { multipart: true, id: 'note-form'} do |f| %>
	<div class="skc-box skc-box-lg">
		<div class="skc-box-content">
			<div class="skc-box-thumbnail">
				<%= image_tag("note.png")  %>
			</div>
			<div class="skc-box-desc">
				<%= f.text_field :title, class: 'form-control', placeholder: t('.title'), required: 'true' %>
    		<% if @note.errors[:title] %>
    			<ul>
		      <% @note.errors.full_messages_for(:title).each do |msg| %>
		        <li class="error-msg"><%= msg %></li>
		      <% end %>
		      </ul>
    		<% end %>
				<hr />
				<p>
					<strong><%= t('.content') %>:</strong>
					<%= f.text_area :content, class: 'form-control', id: 'edit-note-area' %>
				</p>
				<p id="note-subjects-select">
					<strong>
						<% if @note.subjects.count == 1 %>
						<%= t('.subject.one') %>:
						<% else %>
						<%= t('.subject.plural') %>:
						<% end %>
					</strong>
					<% if @note.subjects %>
						<%= f.select :subjects, options_for_select(@subjects.map { |s| ["#{s.name}-#{s.year}", s.id]}, selected: @note.subjects.map { |s| s.id } ), {}, {class: 'form-control selectpicker', multiple: true, title: '', data: {width: '100%', "live-search" => "true"}} %>
					<% else %>
			  		<%= f.select :subjects, options_from_collection_for_select(@subjects,"id","name"), {}, {class: 'form-control selectpicker', multiple: true, title: '', data: {width: '100%', "live-search" => "true"}} %>
					<% end %>
	    		<% if @note.errors[:subjects] %>
	    			<ul>
			      <% @note.errors.full_messages_for(:subjects).each do |msg| %>
			        <li class="error-msg"><%= msg %></li>
			      <% end %>
			      </ul>
	    		<% end %>
				</p>
				<hr />
				<p>
					<strong><%= t('.document') %>:</strong>
	  			<%= render 'upload_form', note_id: @note.id %>
				</p>
				<hr />
				<div class='tag-form'>
					<div class='tag-menu'>
			   		<div id="add-all" class="btn btn-primary btn-xs hidden-xs"><%= t('.all_class') %></div>
			   		<div class="btn btn-primary btn-xs tag-menu-btn hidden-xs"><%= t('.prepare_exam') %></div>
			   		<div class="btn btn-primary btn-xs tag-menu-btn hidden-xs"><%= t('.past_exam') %></div>
			   		<div id="remove-all" class="btn btn-danger btn-xs"><span class="glyphicon glyphicon-remove"></span><%= t('.clear') %></div>
		      </div>
		      <%= text_area_tag 'tags', nil, class: 'tag-input' %>
		      <div class="tag-indicator">
		      	<span class="glyphicon glyphicon-chevron-right"></span>
		      </div>
		      <div class="tag-form-title"><%= t('tag_plural') %></div>
				</div>
			</div>
			<br />
			<%= f.submit class: 'btn btn-success col-sm-2 col-sm-offset-5 col-xs-12 col-xs-offset-0' %>
		</div>
	</div>
	
	  	
	<% end %>
</div>

<script>
	$(document).ready(function(){
		
		$('.selectpicker').selectpicker();

		$("#edit-note-area").wysihtml5({locale: I18n["meta"]["code_country"]});
	
		// instantiate the bloodhound suggestion engine
		var tags = new Bloodhound({
		  datumTokenizer: function(d) { return Bloodhound.tokenizers.whitespace(d.name); },
		  queryTokenizer: Bloodhound.tokenizers.whitespace,
		  limit: 5,
		  prefetch: {
		  	ttl: 0,
		    url: '/tags.json',
		    filter: function(list) {
		      return $.map(list, function(tag) { return { name: tag.name }; });
		    }
		  }
		});
		 
		// initialize the bloodhound suggestion engine
		tags.initialize();
		
		//initiate tagsinput	
		$('.tag-input').tagsinput({
			tagClass: function(item) {
		    switch (item) {
		      case '試験対策': return 'label label-warning';
		      case '過去問題': return 'label label-success';
		      default: return 'label label-info';
		    }
	  	},
			confirmKeys: [13, 9]
		});
	
		$('.tag-input').tagsinput('input').typeahead(null, {
			// instantiate the typeahead UI
			  displayKey: 'name',
	 			source: tags.ttAdapter()
		}).bind('typeahead:selected', $.proxy(function (obj, datum) {  
		  this.tagsinput('add', datum.value);
		  //this.tagsinput('input').typeahead('val','');
		}, $('.tag-input')));
		
		//menu bar
		$('#add-all').on('click', function() {
			for (var i=1;i<=15;i++)
			{ 
				$('.tag-input').tagsinput('add', i + '回目' );
			}
		});
		$('.tag-menu-btn').on('click', function() {
			$('.tag-input').tagsinput('add', this.innerHTML );
		});
		$('#remove-all').on('click', function() {
			$('.tag-input').tagsinput('removeAll');
		});
		
		//fix for left over text
		$('.bootstrap-tagsinput input').blur(function() {
			$(this).val('');
		});
		
		//add old tags if exist
		/*getJSON is equivalent to 
		$.ajax({
		  dataType: "json",
		  url: url,
		  data: data,
		  success: success
		});*/
		// url in ajax syntax: "/tags.json" for absolute url. "tags.json" for relative url.
		// however since rails using RESTFUL, update page has different url, so we need to specific the url
		if ($(".notes").hasClass("edit") || $(".notes").hasClass("update")) {
			$.getJSON("/notes/" + $("#note-edit").data("id") + "/tags.json", function(data, status) {
				$.each(data, function(key, val) {
					$(".tag-input").tagsinput("add", val);
				});
			});
		}
	
	});

</script>
