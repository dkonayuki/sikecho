<div id="fileupload">
  <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
  <div class="row fileupload-buttonbar">
    <div>
      <!-- The fileinput-button span is used to style the file input field as button -->
      <span class="btn btn-success fileinput-button">
        <i class="glyphicon glyphicon-plus"></i>
        <span><%= t('.add_file') %></span>
        <%= file_field_tag :upload, multiple: true %>
      </span>
      <button type="submit" class="btn btn-primary start">
        <i class="glyphicon glyphicon-upload"></i>
        <span><%= t('.start_upload') %></span>
      </button>
      <button type="reset" class="btn btn-warning cancel">
        <i class="glyphicon glyphicon-ban-circle"></i>
        <span><%= t('.cancel_upload') %></span>
      </button>
      <button type="button" class="btn btn-danger delete">
        <i class="glyphicon glyphicon-trash"></i>
        <span><%= t('.delete') %></span>
      </button>
      <input type="checkbox" class="toggle">
    </div>
    <!-- The global progress bar -->
		<div class="col-lg-5 fileupload-progress fade">
        <!-- The global progress bar -->
        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
            <div id="global-progress-bar" class="progress-bar progress-bar-success" style="width: 0%;"></div>
        </div>
    </div>
  </div>
  <!-- The loading indicator is shown during image processing -->
  <div class="fileupload-loading"></div>
  <!-- The table listing the files available for upload/download -->
  <table id="upload-table" class="table"><tbody class="files" data-toggle="modal-gallery" data-target="#modal-gallery"></tbody>
  </table>

</div>

<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
  {% for (var i=0, file; file=o.files[i]; i++) { %}
  <tr class="template-upload fade">
    <td class="preview"><span class="fade"></span></td>
    <td class="name">
    	<a href="#" class="upload-document-name">{%=file.name%}</a>
  	</td>
    <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
    {% if (file.error) { %}
    <td class="error" colspan="2"><span class="label-xs label-red">{%=locale_override[I18n["meta"]["code"]].fileupload.error%}</span> {%=locale_override[I18n["meta"]["code"]].fileupload.errors[file.error] || file.error%}</td>
    {% } else if (o.files.valid && !i) { %}
    <td class="prog"> {%= file.id %}
    	<div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
    </td>
    <td class="start">{% if (!o.options.autoUpload) { %}
      <button class="btn btn-primary">
        <i class="glyphicon glyphicon-upload"></i>
        <!-- <span>{%=locale.fileupload.start%}</span> -->
      </button>
      {% } %}</td>
    {% } else { %}
    <td colspan="2"></td>
    {% } %}
    <td class="cancel">{% if (!i) { %}
      <button class="btn btn-warning">
        <i class="glyphicon glyphicon-ban-circle"></i>
        <!-- <span>{%=locale.fileupload.cancel%}</span> -->
      </button>
      {% } %}</td>
  </tr>
  {% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
  {% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
      {% if (file.error) { %}
        <td></td>
        <td class="name"><span>{%=file.title%}</span></td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
        <td class="error" colspan="2"><span class="label label-important">{%=locale_override[I18n["meta"]["code"]].fileupload.error%} </span> {%=locale_override[I18n["meta"]["code"]].fileupload.errors[file.error] || file.error%}</td>
        {% } else { %}
        <td class="preview">{% if (file.thumbnail_url) { %}
          <a href="{%=file.url%}" title="{%=file.title%}" rel="gallery" download="{%=file.name%}"><img src="{%=file.thumbnail_url%}"></a>
          {% } %}</td>
        <td class="name">
    			<a href="#" data-pk="{%= file.id %}" class="download-document-name">{%=file.title%}</a>
        </td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
        <td colspan="2"></td>
        {% } %}
      <td class="delete">
        <button class="btn btn-danger" data-type="{%=file.delete_type%}" data-url="{%=file.delete_url%}">
          <i class="glyphicon glyphicon-trash"></i>
          <!-- <span>{%=locale.fileupload.destroy%}</span> -->
        </button>
        <input type="checkbox" name="delete" value="1">
      </td>
    </tr>
    {% } %}
</script>

<script type="text/javascript" charset="utf-8">
  $(function () {
      // Initialize the jQuery File Upload widget:
      $('#fileupload').fileupload({
      	url: "/documents",
      	type: "post",
      	formData: {title: ""},
        maxFileSize: 3000000,
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png|pdf)$/i
      });
      
      // Upload done, add newly created document id to document_ids
      $("#fileupload").bind('fileuploaddone', function (e, data) {
  		  $("#fileupload").append("<input id='document_ids' multiple='true' name='document_ids[]' type='hidden' value=" + data.result.files[0].id + ">");
  		  //console.log(data.context.find(".upload-document-name"));
  		  //data.context.find(".upload-document-name").attr("data-pk", data.result.files[0].id);
		  });
      
      // Destroyed event, remove deleted document id from documents_ids
      $('#fileupload').bind('fileuploaddestroyed', function (e, data) {
      	//console.log(data.url.split('/').pop());
      	$("#fileupload :input[value=" + data.url.split('/').pop() + "]").remove();
    	});

			// Uploading individual process
      $('#fileupload').bind('fileuploadprogress', function (e, data) {
      	 $("#note-form :input[type='submit']").prop("disabled", true);
         var progress = parseInt(data.loaded / data.total * 100, 10);
    		 data.context.find('.progress-bar').css('width', progress + '%');
      });
      
			// Uploading global process, disable submit btn
      $('#fileupload').bind('fileuploadprogressall', function (e, data) {
    		 var progress = parseInt(data.loaded / data.total * 100, 10);
      	 $("#note-form :input[type='submit']").prop("disabled", true);
    		 $('#global-progress-bar').css('width', progress + '%');
      });
      
   		// File added callback
   		$('#fileupload').bind('fileuploadadded', function (e, data) {
  		  enableInlineEdit();
   		});
   		
   		// File uploaded callback
	    $('#fileupload').bind('fileuploadcompleted', function (e, data) {
  		  enableInlineEdit();
    	})

   		// get title from name text
   		$('#fileupload').bind('fileuploadsubmit', function (e, data) {
  		  data.formData = {title: data.context.find(".upload-document-name").text()}
			});

   		// Uploading process finished
   		$('#fileupload').bind('fileuploadstop', function (e) {
  		  $("#note-form :input[type='submit']").prop("disabled", false);
   		});

      // Load existing files:
      <% if note_id %>
	      $.getJSON('/notes/<%= note_id %>/documents.json', function (files) {
	        var fu = $('#fileupload').data('blueimpFileupload'), 
	          template;
	        fu._adjustMaxNumberOfFiles(-files.length);
	        
	        //Add to document_ids when start
	        files.forEach(function(file) {
  		  		$("#fileupload").append("<input id='document_ids' multiple='true' name='document_ids[]' type='hidden' value=" + file.id + ">");
	        });
	        
	        template = fu._renderDownload(files)
	          .appendTo($('#fileupload .files'));
	        // Force reflow:
	        fu._reflow = fu._transition && template.length &&
	          template[0].offsetWidth;
	        template.addClass('in');
	        $('#loading').remove();
	      });
			<% end %>
			
			//turn on inline mode
			$.fn.editable.defaults.mode = 'inline';
			$.fn.editable.defaults.ajaxOptions = {dataType: 'json', type: "PUT"};
			
		function enableInlineEdit() {
			$(".upload-document-name").editable({
				type: 'text',
		    showbuttons: 'bottom'
			});
			$(".download-document-name").editable({
				type: 'text',
		    url: '/documents/inline',
		    showbuttons: 'bottom'
			});
		}
		/*
		var subjectID = $("#subject-edit").data("id");

		function enableInlineEdit() {
			//edit inline
			$('.outline-date').editable({
		    format: 'yyyy-mm-dd', //for sending value
		    name: 'date',
		    url: '/subjects/' + subjectID + '/inline',
		    showbuttons: 'bottom'
			});
			
			$('.outline-content').editable({
		    type: 'textarea',
		    name: 'content',
		    url: '/subjects/' + subjectID + '/inline',
		    showbuttons: 'bottom'
			});
		}*/
  });
</script>
